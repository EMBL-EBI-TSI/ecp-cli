#!/usr/bin/python

from __future__ import print_function
import requests
import sys
import os
import argparse
import json
import getpass
import datetime
import yaml

def prettyprint(resp, res, headers):
  table = []
  if res == 'deployment' or res == 'deployments':
    if '_embedded' in resp:
      table.append(['REFERENCE','APP NAME', 'STARTED', 'STATUS'])
      for depl in resp['_embedded']['deploymentResourceList']:
        ts = depl['startedTime'] / 1000.0
        start_t = datetime.datetime.fromtimestamp(ts).strftime('%H:%M %d-%m-%Y')
      
        status_r = requests.get(depl['_links']['status']['href'], headers=headers).json()
        try:
          status = status_r['status']
        except:
          status = 'Error getting status'

        table.append([depl['reference'], depl['applicationName'], start_t, status])

  if res == 'app' or res == 'apps':
    if '_embedded' in resp:
      table.append(['NAME', 'VERSION'])
      for app in resp['_embedded']['applicationResourceList']:
        table.append([app['name'], app['version']])

  if res == 'config' or res == 'configs':
    if '_embedded' in resp:
      for config in resp['_embedded']['configurationResourceList']:
        print('- '+config['name']+':')
        print('    Cloud provider parameters: '+config['cloudProviderParametersName'])
        print('    SSH Public Key: '+config['sshKey'])
        print('    Parameters: '+config['deploymentParametersName'])
      return

  if res == 'cred' or res == 'creds':
    if '_embedded' in resp:
      for cred in resp['_embedded']['cloudProviderParametersResourceList']:
        print('- '+cred['name']+':')
        print('    Provider: '+cred['cloudProvider'])
        print('    Parameters: ')
        for field in cred['fields']:
          print('    * '+field['key']+': '+field['value'])
      return

  if res == 'param' or res == 'params':
    if '_embedded' in resp:
      for param in resp['_embedded']['configurationDeploymentParametersResourceList']:
        print('- '+param['name']+':')
        print('    Parameters: ')
        for field in param['fields']:
          print('    * '+field['key']+': '+field['value'])
      return

  if len(table) > 0:
    print_table(table)
  else:
    # For individual requests, dump to yaml which is better readable
    print(yaml.safe_dump(resp, indent=2, default_flow_style=False))
        
def print_table(table):
  col_width = max([max(len(str(x)) for x in col) for col in zip(*table)]) + 2
  # assuming square table, can take length of first row
  row_format = len(table[0]) * '{:<{fill}}'    
  for row in table:
    print(row_format.format(*row, fill=col_width))

def geturl(res, name):
  baseurl = 'https://api.portal.tsi.ebi.ac.uk'
  if res == 'cred' or res == 'creds':
    respath = '/cloudproviderparameters/'
  elif res == 'param' or res == 'params':
    respath = '/configuration/deploymentparameters/'
  elif res == 'config' or res == 'configs':
    respath = '/configuration/'
  elif res == 'app' or res == 'apps':
    respath = '/application/'
  elif res == 'deployment' or res == 'deployments':
    respath = '/deployment/'
  elif res == 'logs':
    return baseurl+'/deployment/'+name+'/logs'
  elif res == 'status':
    return baseurl+'/deployment/'+name+'/status'

  try:
    return baseurl+respath+name
  except UnboundLocalError:
    print('Unknown resource, use --help for usage', file=sys.stderr)

def main(argv):
  parser = argparse.ArgumentParser(description='EBI CLoud Portal CLI')
  parser.add_argument('verb', help='Action to perform on resource, one of get/create/delete/stop(deployments only)')
  parser.add_argument('resource', nargs='?', help='Resource type to perform action on, one of: cred/param/config/app/deployment/logs')
  parser.add_argument('name', nargs='?', help='Resource name to perform action on', default='')
  parser.add_argument('--file', '-f', help='File containing JSON to post')
  parser.add_argument('--token', '-t', help='File containing JWT identity token, is sourced from ECP_TOKEN env var by default')

  args=parser.parse_args()

  if args.verb != 'login':
    url = geturl(args.resource, args.name)
    if url is None:
      return

  if args.token is not None:
    with open(args.token, 'r') as tokenfile:
      token = tokenfile.read().replace('\n','')
  elif "ECP_TOKEN" in os.environ:
    token = os.environ["ECP_TOKEN"]
  elif os.path.isfile(os.environ['HOME']+'/.ecp_token'):
    with open(os.environ['HOME']+'/.ecp_token', 'r') as tokenfile:
      token = tokenfile.read().replace('\n','')
  else:
    token = ''

  headers = {'Authorization': 'Bearer '+token, 'Content-Type': 'application/json'}
  

  if args.verb == 'get':
    r = requests.get(url, headers=headers)
  elif args.verb == 'create':
    with open(args.file, 'r') as json_file:
      r = requests.post(url, headers=headers, data = json_file.read())
  elif args.verb == 'delete':
    r = requests.delete(url, headers=headers)
  elif args.verb == 'stop':
    r = requests.put(url+'/stop', headers=headers)
  elif args.verb == 'login':
    user = raw_input('Please enter your username: ')
    pw   = getpass.getpass(prompt = 'Please enter your password: ')
    r = requests.get('https://api.aai.ebi.ac.uk/auth', auth=(user,pw))
    with open(os.environ['HOME']+'/.ecp_token', 'w') as tokenfile:
      print(r.text, file=tokenfile)
    print('Logged in with token: '+r.text)
    return
  else:
    r = '{}'
    print('unknown verb, please run with --help for usage')

  if args.verb == 'get':
    prettyprint(r.json(), args.resource, headers)
  else:
    try:
      print(json.dumps(r.json(), indent=2))
    except:
      print("Could not decode Json, raw response:")
      print(r.text)

if __name__ == "__main__":
  main(sys.argv)
